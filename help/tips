Bon Ici je vais mettre les truc important de cours, les trucs qui peuvent simplifier la vie
INTELLIJ TIPS
    Pour choisir sous Intellij les parametres de lancement du programmes: (J'ai galéré a trouver donc je vais vous faire gagner du temps)
        1)Run...
        2)Edit Configuration
        3) Programmes Argument et la tu peux mettre -n -s ce que tu veux
        4) On peut ici ajouter des presets pour pour que ca soit plus rapide, pour lancer un truc deja fait via un preset il faut chiquer sur l'onglet a coté du triangle vert en haut de la fenetre habituelle

    Le raccourci double appui sur alt est pratique pour naviguer dans les views
    et double maj pratique pour faire des recherches

COURS
1 PRATIQUES DE LA PROG

	1) Conception descendente
		On part du principe que les programme qu'on va réaliser a besoins de fonctions qui elles meme vont avoir besoin d'autres fonctions

		          MAIN
		         /   \
		        f1    f2
		      / | \    \
		     f3 f4 f5   f6

		En gros on écris d'abord le main, puis f1, f2, f3, f4, f5, f6 C'est deconseillé pour les gros progs.(Merde j'etais parti la dessus)
		+Avec cette methode ca ne sert a rien de reflechir a la conception.
		- il est mal structuré (=duplication de code)
		+Cela ne sert qu'a faire du code experimental.
		- pour tester il faut avoir deja tout fait (bah oui on ne  peux pas lancer le main tant qu'on a pas ecris f6  car elle en a besoin)
		- ducoup lors du premier test, il y a toutes les erreurs d'un coup, Dur a fixer.


	2) Conception inverse on commence par les briques
	    les methodes qui seront ensuite  reutilisable par plusieurs fonctions
        +Code executable des le debut
        +Code bien structuré
        -Ecrire du code inutile
        +ecriture du code prototype
        Vaut mieux faire ca sur les petits prorammes ou quand on sais très bien ce que l'on veut faire

	3) Conception orienté objet
	    Conception du programe finale. Quand on a bien compris le projet et ce que l'on va faire
	    Se raproche de la conception UML
	    Faire un  Diagrame de Classe et l'utiliser directement (intellij le sais ) #UML
	    -Dificultés pour prototype

AVANCEMENT PROJET

Conception Orienté objet, les classes avaient lors de leurs developement des méthodes main, pour pouvoir vérifier
chacune de leurs méthodes.
Du 21 janvier au 12 fevrier, premiere version de code sans classe générique.
Du 11 fevrier au 4 mars Tout le programme demandé pour les 16 premiers points.
Du 4 au 18 mars Programme limité et sphérique.
Du 18 mars au rendu Gui, Optimisation, debug sphérique.

GITHUB
https://github.com/Drakefly/Projet2018/

REPARTITION DU TRAVAIL
Nous nous sommes contenté du laisser le code dans un depot en ligne, et en laissant des //todo
Chacun travail a sa guise. Nous nous sommes assuré que tout le monde avais un setup fonctionnel. Et avont laissé dans le dossier help
contenant tout le neccesaire a l'utilisiation de Github et intellij. Ce dossier fut fournis par Loic et Clément
Clément "Drakefly" dans le Github Toutes les classes et methodes, elles n'ont pas toutes été debugués. Plusieurs prototype ont été laissé au
débug pour ces camarades. Optimisation, Propreté du code, GUI, ce rendu. Fichiers LIF pour les tests.
Camille "ellid3" dans le github a fait la premiere version de la javadoc & debug du constructeur de Lecture, et les listes personalisées.
Loic "TheJioFreed" dans le Github rendu la liste générique,casts,affichage borné methode ajouter de cette classe, debug simu sphérique.
Zakou "Zakouchi" sans commit
Amadou "" sans commit

OPTIMISATION
Final, transient, un minimun d'operation dans les boucles ex: une variable pour size et ne l'appeller qu'un fois,
StringBuilder, Uttilisation d'un profiler pour trouver les noeuds les plus energivore.IV-D. Réduire le nombre de création d'objet
Préchargement de l'interface graphique, car l'ouverture d'une fenetre est lent. Nous changeons juste le booleen setvisible
si l'utilisateur veut une interface graphique. Import Static. Uttilisation de IndexOf et SubstringndexOf et Substring au lieu de
StringTokenizer. Minimisation des déclaration en dehors des boucles.

PROPRETÉ DU CODE
MVC, JAVADOC, Liste generique, simplification de chaques warning trouvé par Intellij, méthodes pour les codes réétulisés.

TESTS
Les tests ont été efféctués sur, Planeur.LIF, 5QuiPartentLoin.LIF, clignontant.lif,
Les tests se sont tous avérés concluant, sauf pour les mondes circulaires.
